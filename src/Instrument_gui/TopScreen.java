/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Instrument_gui;

import java.sql.*;
import java.util.*;
import java.text.*;

/**
 *
 * @author David Kloosterman
 */
public class TopScreen extends javax.swing.JFrame {

    /**
     * Creates new form TopScreen
     */
    public TopScreen() {
        initComponents();
        InstrumentInfoPanel.setVisible(false);

    }

    // JDBC driver name and database URL
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/sensodx_sql_db?useSSL=false";

    //  Database credentials
    static final String USER = "root";
    static final String PASS = "rootMysql151";

    //String display = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        InstrumentInfoPanel = new javax.swing.JPanel();
        CloseInstrumentInfoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        InstrumentInfoTextArea = new javax.swing.JTextArea();
        SelectInstrumentComboBox = new javax.swing.JComboBox<>();
        InstrumentInfoButton = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SensoDx Topscreen");
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(900, 600));

        InstrumentInfoPanel.setBackground(new java.awt.Color(204, 204, 255));
        InstrumentInfoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CloseInstrumentInfoButton.setText("Close");
        CloseInstrumentInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseInstrumentInfoButtonActionPerformed(evt);
            }
        });

        InstrumentInfoTextArea.setColumns(20);
        InstrumentInfoTextArea.setRows(5);
        InstrumentInfoTextArea.setText("Instrument Information");
        jScrollPane1.setViewportView(InstrumentInfoTextArea);

        SelectInstrumentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Instrument ID" }));
        SelectInstrumentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInstrumentComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InstrumentInfoPanelLayout = new javax.swing.GroupLayout(InstrumentInfoPanel);
        InstrumentInfoPanel.setLayout(InstrumentInfoPanelLayout);
        InstrumentInfoPanelLayout.setHorizontalGroup(
            InstrumentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InstrumentInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InstrumentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(InstrumentInfoPanelLayout.createSequentialGroup()
                        .addComponent(SelectInstrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                        .addComponent(CloseInstrumentInfoButton)))
                .addContainerGap())
        );
        InstrumentInfoPanelLayout.setVerticalGroup(
            InstrumentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InstrumentInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InstrumentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CloseInstrumentInfoButton)
                    .addComponent(SelectInstrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        InstrumentInfoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Instrument_gui/Instrument.png"))); // NOI18N
        InstrumentInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstrumentInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(274, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(InstrumentInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(InstrumentInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(255, 255, 255))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(InstrumentInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(InstrumentInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseInstrumentInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseInstrumentInfoButtonActionPerformed
        // TODO add your handling code here:
        InstrumentInfoPanel.setVisible(false);
    }//GEN-LAST:event_CloseInstrumentInfoButtonActionPerformed

    private void InstrumentInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstrumentInfoButtonActionPerformed

        // load Combo Box with list of all Intrument IDs
        Connection conn;
        String sql;
        Statement stmt;
        ResultSet rs;
        String display = null;

        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            sql = "SELECT instrument_id FROM Instrument_Manufactured";
            rs = stmt.executeQuery(sql);
            SelectInstrumentComboBox.removeAllItems();

            while (rs.next()) {
                String instrumentID = rs.getString("instrument_id");
                SelectInstrumentComboBox.addItem(instrumentID);
            } // end while (rs.next()) 

            // Populate the Instrument Info Panel with Instrument's Mfg. Info
            String selectedInstrumentID = (String) SelectInstrumentComboBox.getSelectedItem();
            display = getInstrumentMfgInfo(selectedInstrumentID);

            // Display Instrument Deployment Info.
            display += getInstrumentDeploymentInfo(selectedInstrumentID);

        } // end try
        catch (ClassNotFoundException e) {
            // handle the error
            display += "\n" + "Class Not Found Exception " + e.getMessage();
            System.exit(0);
        } catch (SQLException e) {
            // handle the error
            display += "\n" + "SQL Exception " + e.getMessage();
            System.exit(0);
        } catch (Exception e) {
            // handle the error
            display += "\n" + "General Exception " + e.getMessage();
            System.exit(0);
        } finally {
            //finally block used to close resources

        }   //end finally

        InstrumentInfoTextArea.setText(display);
        
        // Make Instrument Info Panel visible
        InstrumentInfoPanel.setVisible(true);
    }//GEN-LAST:event_InstrumentInfoButtonActionPerformed

    private void SelectInstrumentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInstrumentComboBoxActionPerformed

        // update Instrument Info Text Area with selected Instrument ID
        String selectedInstrumentID = (String) SelectInstrumentComboBox.getSelectedItem();
        String display = getInstrumentMfgInfo(selectedInstrumentID);
        display += getInstrumentDeploymentInfo(selectedInstrumentID);
        InstrumentInfoTextArea.setText(display);
    }//GEN-LAST:event_SelectInstrumentComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TopScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TopScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TopScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TopScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new TopScreen().setVisible(true);
            }
        });

    } // end main

    private String getInstrumentMfgInfo(String forInstrID) {

        Connection conn = null;
        String sql = null;
        Statement stmt = null;
        ResultSet rs = null;

        String display = "Instrument  Manufacturing Information \n";

        try {

            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();

            // get and display data for seleted Instrument ID
//            String inst_id = forInstrID;  // this is temp line of code
            sql = "SELECT * FROM Instrument_Manufactured WHERE instrument_id = " + forInstrID;
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String instrumentID = rs.getString("instrument_id");
                java.sql.Timestamp mfg_time = rs.getTimestamp("manufactured_timestamp");
                String location = rs.getString("manufactured_location");
                String sub1 = rs.getString("subsystem_1_id");
                String sub2 = rs.getString("subsystem_2_id");
                String sub3 = rs.getString("subsystem_3_id");
                display += "\t ID: " + instrumentID
                        + "\n\t timestamp: " + mfg_time
                        + "\n\t location: " + location
                        + "\n\t sub1: " + sub1
                        + "\n\t sub2: " + sub2
                        + "\n\t sub3: " + sub3
                        + "\n";
            } // end while (rs.next())

        } catch (ClassNotFoundException e) {
            // handle the error
            display += "\n" + "Class Not Found Exception " + e.getMessage();
            System.exit(0);
        } catch (SQLException e) {
            // handle the error
            display += "\n" + "SQL Exception " + e.getMessage();
            System.exit(0);
        } catch (Exception e) {
            // handle the error
            display += "\n" + "General Exception " + e.getMessage();
            System.exit(0);
        } finally {
            //finally block used to close resources

        }   //end finally try
        return (display);
    }

    private String getInstrumentDeploymentInfo(String forInstrID) {

        Connection conn;
        String sql;
        Statement stmt;
        ResultSet rs;

        String display = "Instrument Deployment Information";

        try {

            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();

            // get and display data for seleted Instrument ID
            /////////////////////////////////////////////////////////////////
            sql = "SELECT * FROM Instrument_Deployed WHERE instrument_id = " + forInstrID;
            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                String instrumentID = rs.getString("instrument_id");
                java.sql.Timestamp time = rs.getTimestamp("installation_timestamp");
                String customer_id = rs.getString("customer_id");
                String customer_name = rs.getString("customer_name");
                String customer_location = rs.getString("customer_location");
                String contact_name = rs.getString("contact_name");
                String contact_telephone = rs.getString("contact_telephone");
                String contact_email = rs.getString("contact_email");
                java.sql.Date customer_since = rs.getDate("customer_since");
                String assay_types_enabled = rs.getString("assay_types_enabled");

                display += "\n\t ID: " + instrumentID
                        + "\n\t installed: " + time
                        + "\n\t customer id: " + customer_id
                        + "\n\t customer name: " + customer_name
                        + "\n\t customer location: " + customer_location
                        + "\n\t contact name: " + contact_name
                        + "\n\t contact phone: " + contact_telephone
                        + "\n\t cpntact email: " + contact_email
                        + "\n\t customer since: " + customer_since
                        + "\n\t assays enabled: " + assay_types_enabled + "\n";
            } // end while (rs.next())

        } catch (ClassNotFoundException e) {
            // handle the error
            display += "\n" + "Class Not Found Exception " + e.getMessage();
            System.exit(0);
        } catch (SQLException e) {
            // handle the error
            display += "\n" + "SQL Exception " + e.getMessage();
            System.exit(0);
        } catch (Exception e) {
            // handle the error
            display += "\n" + "General Exception " + e.getMessage();
            System.exit(0);
        } finally {
            //finally block used to close resources

        }   //end finally try
        return (display);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseInstrumentInfoButton;
    private javax.swing.JButton InstrumentInfoButton;
    private javax.swing.JPanel InstrumentInfoPanel;
    private javax.swing.JTextArea InstrumentInfoTextArea;
    private javax.swing.JComboBox<String> SelectInstrumentComboBox;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
